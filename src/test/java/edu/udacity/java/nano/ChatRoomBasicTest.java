package edu.udacity.java.nano;

// Generated by Selenium IDE
import static org.hamcrest.CoreMatchers.is;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertThat;

import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.TimeUnit;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.junit.After;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.openqa.selenium.By;
import org.openqa.selenium.Dimension;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.Keys;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.chrome.ChromeDriver;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.web.server.LocalServerPort;

import edu.udacity.java.nano.chat.service.UserInfoService;
import edu.udacity.java.nano.util.StopOnFailureRunner;
import edu.udacity.java.nano.util.TestOrder;

/**
 * Chat Room Basic Tests.
 * <p>
 * :INFO: Use Selenium IDE for this purpose. You can then convert the 
 * selenium testsuite to JUnit / JAVA-Code with little adaptations.
 * </p>
 * 
 * @author traal-devel
 */
@RunWith(StopOnFailureRunner.class)
// td, 12.11.2019. Switch to defined port, because did not work with websocket
// configuration substitution.
@SpringBootTest(
  webEnvironment = SpringBootTest.WebEnvironment.DEFINED_PORT                    
)
public class ChatRoomBasicTest {

  
  /* constants */
  private static Logger logger = LogManager.getLogger(ChatRoomBasicTest.class);
  
  /* member variables */
  private WebDriver driverUser1;
  private WebDriver driverUser2;
  private Map<String, Object> vars;
  JavascriptExecutor js;
  
  
  @LocalServerPort
  private Long localPort;
  
  @Autowired
  private UserInfoService userInfoService;
  
  
  @Before
  public void setUp() {
    System.setProperty("webdriver.chrome.driver", "data/webdriver/chromedriver");
    driverUser1 = new ChromeDriver();
    js = (JavascriptExecutor) driverUser1;
    vars = new HashMap<String, Object>();
    
    driverUser2 = new ChromeDriver();
  }
  
  @After
  public void tearDown() {
    driverUser1.quit();
    driverUser2.quit();
  }
  
  @Test
  @TestOrder(order = 0)
  public void testLocalPortNotNull() {
    assertNotNull(this.localPort);
  }
  
  @Test
  @TestOrder(order = 10)
  public void testLogin() {
    driverUser1.manage().deleteAllCookies();
    driverUser1.get("http://localhost:" + this.localPort + "/");
    driverUser1.manage().window().setSize(new Dimension(1671, 1128));
    driverUser1.findElement(By.id("username")).click();
    driverUser1.findElement(By.id("username")).sendKeys("Johann");
    driverUser1.findElement(By.linkText("Login")).click();
    assertThat(driverUser1.findElement(By.id("username")).getText(), is("Johann"));
    this.userInfoService.removeAllAccessTokens();
  }
  
  @Test
  @TestOrder(order = 15)
  public void testLogout() throws Exception {
    driverUser1.manage().deleteAllCookies();
    driverUser1.get("http://localhost:" + this.localPort + "/");
    driverUser1.manage().window().setSize(new Dimension(1671, 1128));
    driverUser1.findElement(By.id("username")).click();
    driverUser1.findElement(By.id("username")).sendKeys("Johann");
    driverUser1.findElement(By.linkText("Login")).click();
    assertThat(driverUser1.findElement(By.id("username")).getText(), is("Johann"));
    driverUser1.findElement(By.cssSelector(".mdui-btn > .mdui-icon")).click();
    assertThat(driverUser1.findElement(By.cssSelector("h3")).getText(), is("Chat Room"));
    this.userInfoService.removeAllAccessTokens();
  }
  
  @Test
  @TestOrder(order = 20)
  public void testUserJoin() {
    // First User
    driverUser1.manage().deleteAllCookies();
    driverUser1.get("http://localhost:" + this.localPort + "/");
    driverUser1.manage().window().setSize(new Dimension(1671, 1128));
    driverUser1.findElement(By.id("username")).click();
    driverUser1.findElement(By.id("username")).sendKeys("Johann");
    driverUser1.findElement(By.linkText("Login")).click();
    assertThat(driverUser1.findElement(By.id("username")).getText(), is("Johann"));
    
    // Second user
    driverUser2.manage().deleteAllCookies();
    driverUser2.get("http://localhost:" + this.localPort + "/");
    driverUser2.manage().window().setSize(new Dimension(1671, 1128));
    driverUser2.findElement(By.id("username")).click();
    driverUser2.findElement(By.id("username")).sendKeys("Marvin");
    driverUser2.findElement(By.linkText("Login")).click();
    assertThat(driverUser2.findElement(By.id("username")).getText(), is("Marvin"));
    
    // Check if users exists in the view ...
    assertThat(driverUser2.findElement(By.cssSelector(".mdui-list-item:nth-child(1) > .mdui-list-item-content")).getText(), is("Johann"));
    assertThat(driverUser2.findElement(By.cssSelector(".mdui-list-item:nth-child(2) > .mdui-list-item-content")).getText(), is("Marvin"));

    // ... as well in the dumm user info service.
    List<String> userList = this.userInfoService.getAllUsernames();
    assertEquals("Johann", userList.get(0));
    assertEquals("Marvin", userList.get(1));
    this.userInfoService.removeAllAccessTokens();
  }
  
  @Test
  @TestOrder(order = 25)
  public void testSendMessage() throws Exception {
    driverUser1.manage().deleteAllCookies();
    driverUser1.get("http://localhost:" + this.localPort + "/");
    driverUser1.manage().window().setSize(new Dimension(1671, 1128));
    driverUser1.findElement(By.id("username")).click();
    driverUser1.findElement(By.id("username")).sendKeys("Johann");
    driverUser1.findElement(By.linkText("Login")).click();
    assertThat(driverUser1.findElement(By.id("username")).getText(), is("Johann"));
    driverUser1.findElement(By.id("msg")).click();
    driverUser1.findElement(By.id("msg")).sendKeys("Hello World!");
    driverUser1.findElement(By.id("msg")).sendKeys(Keys.ENTER);
    
    // Check if sent message was printed 
    assertThat(driverUser1.findElement(By.cssSelector(".mdui-card:nth-child(2) .mdui-card-content")).getText(), is("Johann：Hello World!"));
    this.userInfoService.removeAllAccessTokens();
  }
  
  
  @Test
  @TestOrder(order = 25)
  public void testUserCommunication() {
    // First User
    driverUser1.manage().deleteAllCookies();
    driverUser1.get("http://localhost:" + this.localPort + "/");
    driverUser1.manage().window().setSize(new Dimension(1671, 1128));
    driverUser1.findElement(By.id("username")).click();
    driverUser1.findElement(By.id("username")).sendKeys("Johann");
    driverUser1.findElement(By.linkText("Login")).click();
    assertThat(driverUser1.findElement(By.id("username")).getText(), is("Johann"));
    
    // Second user
    driverUser2.manage().deleteAllCookies();
    driverUser2.get("http://localhost:" + this.localPort + "/");
    driverUser2.manage().window().setSize(new Dimension(1671, 1128));
    driverUser2.findElement(By.id("username")).click();
    driverUser2.findElement(By.id("username")).sendKeys("Marvin");
    driverUser2.findElement(By.linkText("Login")).click();
    assertThat(driverUser2.findElement(By.id("username")).getText(), is("Marvin"));
    
    // First user sends something.
    driverUser1.findElement(By.id("msg")).click();
    driverUser1.findElement(By.id("msg")).sendKeys("Hello World!");
    driverUser1.findElement(By.id("msg")).sendKeys(Keys.ENTER);
    
    driverUser1.manage().timeouts().implicitlyWait(2, TimeUnit.SECONDS);
    driverUser2.manage().timeouts().implicitlyWait(2, TimeUnit.SECONDS);
    
    // Check if sent message was printed in view of second user.
    // At this moment the second message should be the same.
    assertThat(driverUser1.findElement(By.cssSelector(".mdui-card:nth-child(2) .mdui-card-content")).getText(), is("Johann：Hello World!"));
    assertThat(driverUser2.findElement(By.cssSelector(".mdui-card:nth-child(2) .mdui-card-content")).getText(), is("Johann：Hello World!"));
    
    this.userInfoService.removeAllAccessTokens();
  }
  
  
}
